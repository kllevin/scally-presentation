/* ============================================================================
   @UTILITIES -> DROP DOWN
   ========================================================================= */


/**
 * A generic drop down utility powered by some JavaScript which toggles a
 * class e.g. `is-visible` on the drop down trigger (the button that makes the
 * drop down visible and invisible) and the target (the actual drop down).
 * This class will be used to make the drop down target visible when the
 * trigger is selected. There is also a version for showing the drop down via
 * the `:hover` pseudo class which is turned off for touch devices.
 *
 * @markup
   <div class="u-drop-down">
     <!-- The trigger -->
     <button class="u-drop-down__trigger"> ... </button>
     <!-- The target -->
     <div class="u-drop-down__target"> ... </div>
   </div>
 */


/**
 * Settings.
 */

/**
 * Toggle on/off certain styles and treatments.
 */

// Apply at these breakpoints
$u-drop-down-apply-at-breakpoints:               $default-breakpoints !default;

// From the above choose what you want to apply it too
$u-drop-down-apply-at-breakpoints-for-default:   false !default;

$u-drop-down-apply-at-breakpoints-for-target:    false !default;

$u-drop-down-apply-at-breakpoints-for-on-hover:  false !default;

/**
 * State classes.
 */

// The state class that is powered by JavaScript
$u-drop-down-state-class:                 is-visible !default;

// Class that is used to identify touch support
$u-drop-down-touch-support-class:         is-touch !default;


/**
 * Drop down container for the trigger and target.
 *
 * 1. Sets the positioning context for the target.
 */

%u-drop-down,
.u-drop-down {position: relative;} // [1]

@if $u-drop-down-apply-at-breakpoints-for-default {
  @include generate-at-breakpoints('.u-drop-down', $u-drop-down-apply-at-breakpoints) {
    position: relative;
  }
}// end if


  /**
   * The target, the actual drop down.
   */

  %u-drop-down__target,
  .u-drop-down__target {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;

    // Show the drop down via the JavaScript powered state class and via the
    // hover modifier.
    &.#{$u-drop-down-state-class},
    .u-drop-down--on-hover:hover & {display: block;}
  }

  @if $u-drop-down-apply-at-breakpoints-for-target {
    @include generate-at-breakpoints('.u-drop-down__target',
      $u-drop-down-apply-at-breakpoints) {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;

      &.#{$u-drop-down-state-class},
      .u-drop-down--on-hover:hover & {display: block;}
    }
  }// end if


  /**
   * Disable for touch devices as they don't have `:hover` support.
   *
   * N.B. this will require functionality that can append a hook to an element
   * (typically the `html` element) if touch is supported.
   */

  %#{$u-drop-down-touch-support-class} .u-drop-down--on-hover .u-drop-down__target,
  .#{$u-drop-down-touch-support-class} .u-drop-down--on-hover .u-drop-down__target {display: none;}

  @if $u-drop-down-apply-at-breakpoints-for-on-hover {
    @include generate-at-breakpoints('.#{$u-drop-down-touch-support-class} .u-drop-down--on-hover .u-drop-down__target', $u-drop-down-apply-at-breakpoints) {
      display: none;
    }
  }// end if