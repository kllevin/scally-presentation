/* ============================================================================
   @UTILITIES -> WIDTHS
   ========================================================================= */


/**
 * Apply different width treatments to elements. They're two different types of
 * treatments you can apply:
 *
 * - Intrinsic widths
 * - Percentage widths
 */




/**
 * Settings.
 */

/**
 * Toggle on/off certain styles and treatments.
 */

// Apply at these breakpoints
$u-width-intrinsic-apply-at-breakpoints:                     (lap) !default;

$u-width-percentage-apply-at-breakpoints:                    (lap) !default;

// What intrinsic widths do you want to apply it too?
$u-width-apply-at-breakpoints-for-shrink-wrap:               false !default;

$u-width-apply-at-breakpoints-for-fill-remaining-space:      false !default;

$u-width-apply-at-breakpoints-for-fill-remaining-space-alt:  false !default;

$u-width-apply-at-breakpoints-for-full-bleed:                false !default;

// Box sizing, here we set a variable assuming that `box-sizing: border-box;`
// is not set globally. If it has been previously been defined, the following
// variable will be overriden and will be set to `true`.
$apply-friendly-box-model:                                   false !default;




/**
 * Intrinsic widths.
 */


/**
 * Make an element shrink wrap its content.
 */

%u-width-shrink-wrap,
.u-width-shrink-wrap {
  display: block;
  float: left;
  width: auto;
}

@if $u-width-apply-at-breakpoints-for-shrink-wrap {
  @include generate-at-breakpoints('.u-width-shrink-wrap',
    $u-width-intrinsic-apply-at-breakpoints) {
    display: block;
    float: left;
    width: auto;
  }
}// end if

// Float it right
%u-width-shrink-wrap--right,
.u-width-shrink-wrap--right {float: right;}

@if $u-width-apply-at-breakpoints-for-shrink-wrap {
  @include generate-at-breakpoints('.u-width-shrink-wrap--right',
    $u-width-intrinsic-apply-at-breakpoints) {float: right;}
}// end if


/**
 * Make an element fill the remaining space.
 *
 * N.B. for the alternative method do not use if child elements might be wider
 * than the remaining space because in Chrome, Safari, and Firefox it results
 * in undesired layout.
 */

%u-width-fill-remaining-space,
.u-width-fill-remaining-space {
  display: block;
  overflow: hidden;
  width: auto;
}

@if $u-width-apply-at-breakpoints-for-fill-remaining-space {
  @include generate-at-breakpoints('.u-width-fill-remaining-space',
    $u-width-intrinsic-apply-at-breakpoints) {
    display: block;
    overflow: hidden;
    width: auto;
  }
}// end if

// Alternative method
%u-width-fill-remaining-space-alt,
.u-width-fill-remaining-space-alt {
  display: table-cell;
  max-width: 100%;
  width: 10000px;
}

@if $u-width-apply-at-breakpoints-for-fill-remaining-space-alt {
  @include generate-at-breakpoints('.u-width-fill-remaining-space-alt',
    $u-width-intrinsic-apply-at-breakpoints) {
    display: table-cell;
    max-width: 100%;
    width: 10000px;
  }
}// end if


/**
 * Make an element the width of its parent.
 */

%u-width-full-bleed,
.u-width-full-bleed {
  display: block;
  width: 100%;

  @if $apply-friendly-box-model == false {
    box-sizing: border-box;
  }//endif
}

@if $u-width-apply-at-breakpoints-for-full-bleed {
  @include generate-at-breakpoints('.u-width-full-bleed',
    $u-width-intrinsic-apply-at-breakpoints) {
    display: block;
    width: 100%;

    @if $apply-friendly-box-model == false {
      box-sizing: border-box;
    }//endif
  }
}// end if




/**
 * Percentage based width classes generated by the `generate-percentage-classes
 * -at-breakpoints` mixin found here: Core -> Settings -> Mixins. Each class
 * get's its value and is named after the Sass settings defined here: Core ->
 * Settings -> Widths with the addition of the utility namespace: `u-`, e.g.
 * `$one-half` = `.u-one-half`.
 *
 * All the width classes can be applied at different breakpoints with the
 * format being:
 *
 * Using a `min-width` media query (default):
 *
   .u-[setting-name]-from-[breakpoint]
 *
 * E.g.
 *
   .u-one-half-from-lap
 *
 * Using a `max-width` media query:
 *
   .u-[setting-name]-up-to-[breakpoint]
 *
 * E.g.
 *
   .u-one-third-up-to-desk
 */

@include generate-percentage-classes-at-breakpoints(
  $u-width-percentage-apply-at-breakpoints);