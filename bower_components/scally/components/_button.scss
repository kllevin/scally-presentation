/* ============================================================================
   @COMPONENTS -> BUTTON
   ========================================================================= */


/**
 * Button component with a bunch of modifiers.
 */




/**
 * Settings.
 */

// Toggle on/off certain styles and treatments
$c-btn-apply-hover-styles:                true !default;

$c-btn-apply-border:                      false !default;

$c-btn-apply-rounded-corners:             false !default;

$c-btn-apply-group-rounded-corners:       true !default;

// Box sizing, here we set a variable assuming that `box-sizing: border-box;`
// is not set globally. If it has been previously been defined, the following
// variable will be overriden and will be set to `true`.
$apply-friendly-box-model:                      false !default;

// Colours
$c-btn-background-colour:                 $colour-primary !default;

$c-btn-background-colour-secondary:       $colour-secondary !default;

$c-btn-foreground-colour:                 $colour-white !default;

$c-btn-foreground-colour-secondary:       $c-btn-foreground-colour !default;

// Padding
$c-btn-padding-base:                      $spacing-base !default;

$c-btn-padding-tiny:                      $spacing-third !default;

$c-btn-padding-small:                     $spacing-half !default;

$c-btn-padding-large:                     $spacing-base-plus-half !default;

$c-btn-padding-huge:                      $spacing-double !default;

// Border
// N.B. also includes the borders used in the 'Button Group' modifier
$c-btn-border-thickness:                  1 !default;

$c-btn-border-style:                      solid !default;

$c-btn-border-colour:                     darken($c-btn-background-colour, 10%) !default;

$c-btn-border-colour-secondary:           darken($c-btn-background-colour-secondary, 10%) !default;

// Rounded corners
$c-btn-rounded-corners-size:              $border-radius !default;

// Hover/focus styles
// Simple fade out effect via `opacity`
$c-btn-hover-opacity-strength:            0.7 !default;

$c-btn-hover-transition-duration:         0.1 !default;

$c-btn-hover-transition-timing-function:  linear !default;




/**
 * Base styles all buttons need, from here we apply specific button styles via
 * modifiers.
 *
 * 1. Prevent button text from being selectable.
 * 2. Make sure `input` will wrap text across multiple lines.
 * 3. Allow us to style box model properties.
 * 4. Line different sized buttons up a little nicer.
 * 5. Correct font family not being inherited in all browsers.
 * 6. Correct font size not being inherited in all browsers.
 * 7. Address Firefox 4+ setting `line-height` on `input` using `!important` in
 *    the UA stylesheet.
 * 8. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 9. Reset/normalize styles from the UA stylesheet.
 */

%btn,
.btn {
  user-select: none; // [1]
  white-space: normal; // [2]
  display: inline-block; // [3]
  vertical-align: middle; // [4]
  font-family: inherit; // [5]
  font-size: 100%; // [6]
  line-height: normal; // [7]
  cursor: pointer; // [8]
  border: 0; // [9]
  padding: 0; // [9]
  margin: 0; // [9]
  background: transparent; // [9]

  &,
  &:hover,
  &:focus,
  &:active {text-decoration: none;}
}




/**
 * Main.
 *
 * The main button styles for your project.
 */

%btn--main,
.btn--main {
  text-align: center;
  background-color: $c-btn-background-colour;
  @include to-rem(padding, $c-btn-padding-base / 2 $c-btn-padding-base);

  // Apply a border
  @if $c-btn-apply-border {
    @include to-rem(border, $c-btn-border-thickness $c-btn-border-style $c-btn-border-colour);
  }// endif

  // Apply rounded corners
  @if $c-btn-apply-rounded-corners {
    // N.B. ugly hack in order to increase the specificty to override the
    // removal of rounded corners that iOS applies set in Core -> Base ->
    // Forms
    html & {@include to-rem(border-radius, $c-btn-rounded-corners-size);}
  }// endif

  // Foreground colour
  &,
  &:hover,
  &:focus,
  &:active {color: $c-btn-foreground-colour;}

  // Apply hover/focus styles
  @if $c-btn-apply-hover-styles {
    &:hover,
    &:focus {
      opacity: $c-btn-hover-opacity-strength;
      transition: opacity #{$c-btn-hover-transition-duration}s $c-btn-hover-transition-timing-function;
    }
  }// endif
}


/**
 * Modifier: secondary colour.
 */

%btn--main--secondary,
.btn--main--secondary {
  background-color: $c-btn-background-colour-secondary;

  // Apply a border
  @if $c-btn-apply-border {
    @include to-rem(border-color, $c-btn-border-colour-secondary);
  }// endif

  // Foreground colour
  &,
  &:hover,
  &:focus,
  &:active {color: $c-btn-foreground-colour-secondary;}
}


/**
 * Modifier: tiny padding.
 */

%btn--main--tiny,
.btn--main--tiny {@include to-rem(padding, $c-btn-padding-tiny / 2 $c-btn-padding-tiny);}


/**
 * Modifier: small padding.
 */

%btn--main--small,
.btn--main--small {@include to-rem(padding, $c-btn-padding-small / 2 $c-btn-padding-small);}


/**
 * Modifier: large padding.
 */

%btn--main--large,
.btn--main--large {@include to-rem(padding, $c-btn-padding-large / 2 $c-btn-padding-large);}


/**
 * Modifier: huge padding.
 */

%btn--main--huge,
.btn--main--huge {@include to-rem(padding, $c-btn-padding-huge / 2 $c-btn-padding-huge);}


/**
 * Modifier: full bleed.
 */

%btn--main--full-bleed,
.btn--main--full-bleed {
  display: block;
  width: 100%;

  @if $apply-friendly-box-model == false {
    /**
     * Remove paddings so that widths and paddings don't conflict.
     *
     * N.B. if you're applying a border then that will conflict with the width
     * however Scally can't turn off your border in this case.
     */

    padding-right: 0;
    padding-left: 0;
  }// endif
}




/**
 * A button that looks like a link.
 */

.btn--faux-link {
  color: $link-colour;

  &:hover,
  &:focus {
    color: $link-colour-hover;
    text-decoration: underline;
  }
}




/**
 * Button group. When you want to group a bunch of buttons side-by-side flush
 * to each other i.e. with no gap between the buttons. To differentiate
 * between the buttons a border is added, if borders haven't already been
 * applied that is i.e. `$c-btn-border == true`.
 *
 * N.B. this modifier requires that you remove the whitespace between the
 * buttons so they're flush to each other, one way to do this is by inserting
 * HTML comments between the buttons.
 *
 * @markup
   <div class="btn-group">
     <button class="btn btn--main">Left</button><!--
      --><button class="btn btn--main">Middle</button><!--
      --><button class="btn btn--main">Right</button>
   </div>
 */


.btn-group {

  .btn--main {

    @if $c-btn-apply-border == false {
      @include to-rem(border, $c-btn-border-thickness $c-btn-border-style
        $c-btn-border-colour);
    }

    // Turn off right borders so they don't double up, except for the last
    // one
    &:not(:last-child) {border-right: 0;}

    // Turn off rounded corners if rounded corners are on by default as only
    // the first and last buttons in the group need rounded corners
    @if $c-btn-apply-rounded-corners {
      border-radius: 0;
    }

    // Round off the first and last buttons in the group
    @if $c-btn-apply-group-rounded-corners or $c-btn-rounded-corners {
      &:first-child {@include to-rem(border-top-left-radius
        border-bottom-left-radius, $c-btn-rounded-corners-size);}

      &:last-child {@include to-rem(border-top-right-radius
        border-bottom-right-radius, $c-btn-rounded-corners-size);}
    }

  }


  /**
   * Modifier: vertically stacked button group.
   *
   * N.B. buttons within the vertically stacked version need to use the
   * `btn--main--full-bleed` main button modifier.
   */

  &.btn-group--vertical {
    // This will shrink wrap the container to be as wide as the widest button
    display: inline-block;

    .btn--main {

      // Turn back on the right border that gets turned off by default
      @include to-rem(border-right, $c-btn-border-thickness
        $c-btn-border-style $c-btn-border-colour);

      // Turn off bottom borders so they don't double up, except for the last
      // one
      &:not(:last-child) {border-bottom: 0;}

      // Round off the first and last buttons in the group
      @if $c-btn-apply-group-rounded-corners or $c-btn-apply-rounded-corners {
        &:first-child {
          border-bottom-left-radius: 0;
          @include to-rem(border-top-left-radius border-top-right-radius,
            $c-btn-rounded-corners-size);
        }

        &:last-child {
          border-top-right-radius: 0;
          @include to-rem(border-bottom-left-radius
            border-bottom-right-radius, $c-btn-rounded-corners-size);
        }
      }
    }
  }
}